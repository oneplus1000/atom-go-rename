var $, BufferedProcess, GoRenameView, TextEditorView, View, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BufferedProcess = require('atom').BufferedProcess;

ref = require('atom-space-pen-views'), $ = ref.$, TextEditorView = ref.TextEditorView, View = ref.View;

module.exports = GoRenameView = (function(superClass) {
  extend(GoRenameView, superClass);

  function GoRenameView() {
    return GoRenameView.__super__.constructor.apply(this, arguments);
  }

  GoRenameView.content = function() {
    return this.div((function(_this) {
      return function() {
        _this.div('rename identifier:');
        return _this.subview('miniEditor', new TextEditorView({
          mini: true
        }));
      };
    })(this));
  };

  GoRenameView.prototype.initialize = function() {
    atom.commands.add('atom-text-editor', 'go-rename:toggle', (function(_this) {
      return function() {
        return _this.toggle();
      };
    })(this));
    this.panel = atom.workspace.addModalPanel({
      item: this,
      visible: false
    });
    this.miniEditor.on('blur', (function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
    atom.commands.add(this.miniEditor.element, 'core:confirm', (function(_this) {
      return function() {
        return _this.confirm();
      };
    })(this));
    return atom.commands.add(this.miniEditor.element, 'core:cancel', (function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
  };

  GoRenameView.prototype.toggle = function() {
    if (this.panel.isVisible()) {
      return this.close();
    } else {
      return this.open();
    }
  };

  GoRenameView.prototype.close = function() {
    var ref1;
    this.panel.hide();
    if ((ref1 = this.focusElement) != null ? ref1.isOnDom() : void 0) {
      return this.focusElement.focus();
    } else {
      return atom.views.getView(atom.workspace).focus();
    }
  };

  GoRenameView.prototype.open = function() {
    var buffer, wordStart;
    buffer = atom.workspace.getActiveTextEditor();
    if (buffer.isModified()) {
      buffer.save();
    }
    buffer.moveToBeginningOfWord();
    buffer.selectToEndOfWord();
    wordStart = buffer.getSelectedBufferRange().start;
    this.byteOffset = buffer.getTextInBufferRange([[0, 0], wordStart]).length;
    this.filePath = buffer.getPath();
    this.focusElement = $(':focus');
    this.panel.show();
    this.miniEditor.getModel().setText(buffer.getSelectedText());
    this.miniEditor.getModel().selectAll();
    return this.miniEditor.focus();
  };

  GoRenameView.prototype.confirm = function() {
    var args, command, exit, process, stderr, text;
    this.close();
    text = this.miniEditor.getModel().getText();
    if (text.length > 0) {
      command = atom.config.get('go-rename.path');
      args = ['-offset', this.filePath + ":#" + this.byteOffset, '-to', text];
      stderr = (function(_this) {
        return function(output) {
          return _this.result = output;
        };
      })(this);
      exit = (function(_this) {
        return function(code) {
          if (code === 0) {
            return atom.notifications.addSuccess(_this.result);
          } else {
            return atom.notifications.addError(_this.result);
          }
        };
      })(this);
      return process = new BufferedProcess({
        command: command,
        args: args,
        stderr: stderr,
        exit: exit
      });
    }
  };

  return GoRenameView;

})(View);

// ---
// generated by coffee-script 1.9.2
